version: v1.1.0
alias:
  values:
    teleport : "orca run --mount type=bind,options=rbind:rw,source=/var/lib/docker/volumes/{{.Run.SharedVolume}}/_data,destination=/workspace --mount type=bind,options=rbind:rw,source=/var/lib/docker/volumes/home/_data,destination=/home --cwd /workspace --env HOME=/home"
steps:
  - id: build-hello-world
    when: [-]
    build: >
      -f ./Dockerfile
      -t $Registry/demo42/helloworld:$ID
      .
  - id: push-images
    when: ['build-hello-world']
    push: 
    - "$Registry/demo42/helloworld:$ID"
  - id: set-kube-config
    when: [-]
    cmd: bash -c 'echo  -e "{{ .Values.KUBE_CONFIG | indent 6}}" > ~/.kube.config'
  - id: helm-deploy
    # Once the images are built, and we have credentials
    # coalesce the parallel build steps to do the helm upgrade
    when: ['push-images', 'set-kube-config']
    cmd: >
      $teleport $Registry/base-artifacts/acr/helm helm upgrade 
      helloworld ./charts/helloworld/ 
      --reuse-values 
      --set helloworld.image=$Registry/demo42/helloworld:$ID
  - id: az-login
    # login with the identity of the task
    when: [-]
    cmd: >
      az login --identity -o jsonc > /dev/null
  - id: lock-tag
    # Block the ability to update this tag (immutable)
    # Block the ability to delete the image - because it was deployed
`    when: ['az-login', 'push-images']
    cmd: >
      az acr repository update 
      --name $RegistryName
      --image demo42/helloworld:$ID
      --write-enabled false
      --delete-enabled false 
